[{"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\index.js":"1","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\threejsscene.js":"2","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\LMSUtility.js":"3","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\MQTTClient.js":"4"},{"size":349,"mtime":1609729530555,"results":"5","hashOfConfig":"6"},{"size":61533,"mtime":1610530881812,"results":"7","hashOfConfig":"6"},{"size":5682,"mtime":1610509897699,"results":"8","hashOfConfig":"6"},{"size":1533,"mtime":1610530090947,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1lz191p",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\index.js",["21"],"// imports\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ThreeJsScene from \"./threejsscene\";\n\n// three.js scene component\nclass App extends Component \n{\n\trender() \n\t{\n\t\treturn (<div><ThreeJsScene /></div>);\n\t}\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ThreeJsScene />, rootElement);",["22","23"],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\threejsscene.js",["24","25"],"// imports\r\nimport React, { Component } from \"react\";\r\nimport LMSUtility from \"./LMSUtility.js\";\r\nimport MQTTClient from \"./MQTTClient.js\";\r\nimport * as THREE from \"../node_modules/three/build/three.module.js\";\r\nimport {OrbitControls} from \"../node_modules/three/examples/jsm/controls/OrbitControls.js\";\r\nimport {FBXLoader} from \"../node_modules/three/examples/jsm/loaders/FBXLoader.js\";\r\nimport {EffectComposer} from \"../node_modules/three/examples/jsm/postprocessing/EffectComposer.js\";\r\nimport {RenderPass} from \"../node_modules/three/examples/jsm/postprocessing/RenderPass.js\";\r\nimport {ShaderPass} from \"../node_modules/three/examples/jsm/postprocessing/ShaderPass.js\";\r\nimport {OutlinePass} from \"../node_modules/three/examples/jsm/postprocessing/OutlinePass.js\";\r\nimport {FXAAShader} from \"../node_modules/three/examples/jsm/shaders/FXAAShader.js\";\r\nimport {GUI} from \"../node_modules/three/examples/jsm/libs/dat.gui.module.js\"\r\nimport {SelectionBox} from \"../node_modules/three/examples/jsm/interactive/SelectionBox.js\";\r\nimport {SelectionHelper} from \"../node_modules/three/examples/jsm/interactive/SelectionHelper.js\";\r\n\r\n// global variable declarations\r\n\r\n// width and height of window\r\nvar width, height, widthscale, heightscale;\r\n// server address\r\nvar serverAddress;\r\n// three.js basic functionality\r\nvar scene, camera, controls, renderer, minPan, maxPan, v;\r\n// model loader and scene loader\r\nlet fbxloader, sceneloader;\r\n// outline effect use\r\nlet composer, renderPass, outlinePass, effectFXAA;\r\n// basic geometry shapes\r\n// let box, grid, plane;\r\nlet sphere;\r\n// raycasting and picking\r\nlet mouse, raycaster, ghost, lintersect, pintersect;\r\nvar LCTRLdown = false;\r\nvar toggle = false;\r\nvar Lmouseup = false, Rmouseup = false;\r\n// selection box\r\nvar selectedlights = [];\r\nvar selectedStart = false;\r\nvar selectionBox, selectionBoxHelper;\r\n// arrays used for raycasting and picking\r\nvar LightArray = [];\r\nvar PlaneArray = [];\r\n// filename\r\nvar filename = \"\";\r\n// text display\r\nvar text, msg, proggui;\r\n// gui\r\nvar searchgui, textgui, lightgui, colourgui, inputparams, colourparams;\r\nvar currsearch, currgroupid, currzoneid, currmaxbrightness, currdimmedbrightness, \r\n    currmsbrightness, currholdtime, currmssens, currsyncclock, currcolourid;\r\nvar ledstatus, resetkey, firmwareupdate, changemaxbrightness, changedimmedbrightness, \r\n    changemsbrightness, changeholdtime, changemssens, changesyncclock, changetriggers;\r\nvar usegroupcolour = true;\r\nvar currname = \"\";\r\nvar GroupColourArray = [];\r\nvar ZoneColourArray = [];\r\nvar TriggerColour;\r\nvar TriggerLineArray = [];\r\n// mqtt\r\nvar mqttClient;\r\n\r\n// \"enum\" for light status\r\nconst STATUS = \r\n{\r\n\tOFF : 0,\r\n    ON : 1,\r\n    NORMAL: 2\r\n}\r\n\r\n// colour codes for quick access\r\nconst WHITE = 0xFFFFFF;\r\n//const RED = 0xFF0000;\r\nconst GREEN = 0x00FF00;\r\nconst LIGHTBLUE = 0x7EC0EE;\r\n//const YELLOW = 0xF8FF33;\r\nconst GREY = 0x808080;\r\n\r\n// materials\r\nconst translucentMat = new THREE.MeshPhongMaterial(\r\n{\r\n\tcolor: WHITE,\r\n\topacity: 0.5,\r\n\ttransparent: true,\r\n\tside: THREE.DoubleSide,\r\n});\r\n\r\n// three.js scene component\r\nclass ThreeJsScene extends Component \r\n{\r\n    // bind event handlers\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.onWindowResize = this.onWindowResize.bind(this);\r\n        this.onControlsChange = this.onControlsChange.bind(this);\r\n        this.onContextMenu = this.onContextMenu.bind(this);\r\n        this.onDocumentMouseUp = this.onDocumentMouseUp.bind(this);\r\n        this.onDocumentMouseDown = this.onDocumentMouseDown.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.onDocumentMouseMove = this.onDocumentMouseMove.bind(this);\r\n\r\n        this.DrawScene = this.DrawScene.bind(this);\r\n        this.SearchGUIHelper = this.SearchGUIHelper.bind(this);\r\n        this.UpdateTriggers = this.UpdateTriggers.bind(this);\r\n        this.DrawTriggerLine = this.DrawTriggerLine.bind(this);\r\n    }\r\n\r\n    // initialisation ===================================================================\r\n    InitThreeJs()\r\n    {\r\n        // define dimensions\r\n        widthscale = 1.0;\r\n        width = this.mount.clientWidth * widthscale;\r\n        heightscale = 1.0;\r\n        height = this.mount.clientHeight * heightscale;\r\n\r\n        // init scene to grey/silver colour\r\n        scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0xC0C0C0);\r\n        // args: fov, aspect ratio, near plane, far plane\r\n        camera = new THREE.PerspectiveCamera(75, width/height, 0.1, 1000);\r\n        // initial settings\r\n        camera.position.y = 2;\r\n        camera.position.z = 10;\r\n        // init renderer\r\n        renderer = new THREE.WebGL1Renderer({antialias: true});\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(width, height);\r\n        // event listener to track window resize\r\n        window.addEventListener(\"resize\", this.onWindowResize, false);\r\n        // add renderer to page\r\n        this.mount.appendChild(renderer.domElement);\r\n    }\r\n\r\n    InitCameraControls()\r\n    {\r\n        controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.mouseButtons ={LEFT: THREE.MOUSE.PAN, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.ROTATE};\r\n        controls.enableDamping = false;\r\n        //controls.dampingFactor = 0.05;\r\n        controls.rotateSpeed = 0.5;\r\n        controls.screenSpacePanning = false;\r\n        controls.maxPolarAngle = LMSUtility.Rad(86);\r\n        // camera initial facing\r\n        controls.target.set(0.0, 0.0, 0.0);\r\n        camera.position.set(0.0, 45.4, 0.0);\r\n        controls.update();\r\n        // limit camera panning\r\n        minPan = new THREE.Vector3(-40.0, -40.0, -20.0);\r\n        maxPan = new THREE.Vector3(40.0, 40.0, 20.0);\r\n        v = new THREE.Vector3();\r\n        // limit camera zoom\r\n        controls.minDistance = 5.0;\r\n        controls.maxDistance = 45.4;\r\n        // event listeners\r\n\r\n        // limit camera panning\r\n        controls.addEventListener(\"change\", this.onControlsChange);\r\n\r\n        // disable right click context menu\r\n        document.addEventListener(\"contextmenu\", this.onContextMenu, false);\r\n\r\n        // track mouse clicks (pointerup because of orbitcontrols)\r\n        renderer.domElement.addEventListener(\"pointerup\", this.onDocumentMouseUp, false);\r\n        renderer.domElement.addEventListener(\"pointerdown\", this.onDocumentMouseDown, false);\r\n\r\n        // key presses\r\n        document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n        document.addEventListener(\"keyup\", this.onKeyUp, false);\r\n    }\r\n\r\n    InitSceneLights()\r\n    {\r\n    \t// directional light\r\n    \tconst directionalLight = new THREE.DirectionalLight(0xFFFFFF, 1);\r\n    \tscene.add(directionalLight);\r\n    }\r\n\r\n    InitOutline()\r\n    {\r\n    \t// init postprocessing layers\r\n    \tcomposer = new EffectComposer(renderer);\r\n    \trenderPass = new RenderPass(scene, camera);\r\n    \toutlinePass = new OutlinePass(new THREE.Vector2(width, height), scene, camera);\r\n    \teffectFXAA = new ShaderPass(FXAAShader);\r\n\r\n    \t// configure edge colours\r\n    \toutlinePass.visibleEdgeColor.set(\"#F8FF33\");\r\n    \toutlinePass.hiddenEdgeColor.set(\"#F8FF33\");\r\n        outlinePass.edgeStrength= 3.0;\r\n        outlinePass.edgeThickness = 1.0;\r\n        effectFXAA.uniforms[\"resolution\"].value.set(1/width, 1/height);\r\n\r\n    \t// add postprocessing effects\r\n    \tcomposer.addPass(renderPass);\r\n    \tcomposer.addPass(outlinePass);\r\n    \tcomposer.addPass(effectFXAA);\r\n    }\r\n\r\n    InitGeometry()\r\n    {\r\n\t    //box = new THREE.BoxBufferGeometry();\r\n\t    sphere = new THREE.SphereBufferGeometry();\r\n\r\n\t    //const size = 100;\r\n\t    //const divisions = 100;\r\n\t    //grid = new THREE.GridHelper(size, divisions);\r\n\r\n\t    //plane = new THREE.PlaneBufferGeometry();\r\n    }\r\n\r\n    InitLoaders()\r\n    {\r\n        fbxloader = new FBXLoader();\r\n        sceneloader = new THREE.ObjectLoader();\r\n    }\r\n\r\n    InitPicking()\r\n    {\r\n        mouse = new THREE.Vector2();\r\n        raycaster = new THREE.Raycaster();\r\n    \r\n        // create \"ghost\" sphere for placing lights\r\n        ghost = new THREE.Mesh(sphere, translucentMat);\r\n        ghost.scale.x = 0.35;\r\n        ghost.scale.y = 0.35;\r\n        ghost.scale.z = 0.35;\r\n        scene.add(ghost);\r\n        ghost.visible = false;\r\n    \r\n        // selection box\r\n        var styles = `.selectBox\r\n                      {\r\n                          border: 1px solid #55aaff;\r\n                          background-color: rgba(75, 160, 255, 0.3);\r\n                          position: fixed;\r\n                      }`;\r\n        var styleSheet = document.createElement(\"style\");\r\n        styleSheet.type = \"text/css\"\r\n        styleSheet.innerText = styles;\r\n        document.head.appendChild(styleSheet);\r\n    \r\n        selectionBox = new SelectionBox(camera, scene);\r\n        selectionBoxHelper = new SelectionHelper(selectionBox, renderer, \"selectBox\");\r\n    \r\n        // event listener to track mouse move\r\n        document.addEventListener(\"pointermove\", this.onDocumentMouseMove, false);\r\n    }\r\n\r\n    InitTextDisplay()\r\n    {\r\n        // light data display setup\r\n\t    text = document.createElement(\"div\");\r\n\t    text.style.position = \"absolute\";\r\n\t    text.style.width = \"330px\";\r\n\t    text.style.height = \"390px\";\r\n\t    text.style.backgroundColor = \"black\";\r\n\t    text.style.color = \"white\";\r\n\t    text.innerHTML = \"\";\r\n\t    text.style.top = \"0px\";\r\n\t    text.style.left = \"0px\";\r\n\t    text.style.fontSize = 20 + \"px\";\r\n\t    text.style.fontFamily = \"Calibri\";\r\n\t    text.style.display = \"none\";\r\n\t    document.body.appendChild(text);\r\n\r\n\t    // error display setup\r\n\t    msg = document.createElement(\"div\");\r\n\t    msg.style.position = \"absolute\";\r\n\t    msg.style.backgroundColor = \"black\";\r\n\t    msg.style.color = \"white\";\r\n\t    msg.innerHTML = \"\";\r\n\t    msg.style.bottom = \"0px\";\r\n\t    msg.style.left = \"0px\";\r\n\t    msg.style.fontSize = 20 + \"px\";\r\n\t    msg.style.fontFamily = \"Calibri\";\r\n        document.body.appendChild(msg);\r\n        \r\n        // firmware update progress\r\n        proggui = document.createElement(\"div\");\r\n        proggui.style.position = \"absolute\";\r\n        proggui.style.backgroundColor = \"black\";\r\n        proggui.style.color = \"white\";\r\n        proggui.innerHTML = \"\";\r\n        proggui.style.bottom = \"0px\";\r\n        proggui.style.right  = \"0px\";\r\n        proggui.style.fontSize = 20 + \"px\";\r\n\t    proggui.style.fontFamily = \"Calibri\";\r\n        document.body.appendChild(proggui);\r\n    }\r\n\r\n    InitGUI()\r\n    {\r\n    \tsearchgui = new GUI();\r\n        textgui = new GUI();\r\n        lightgui = new GUI();\r\n        colourgui = new GUI();\r\n\r\n    \t// search field gui\r\n    \tconst searchparam = {\"Search\": \"\"};\r\n    \tsearchgui.add(searchparam, \"Search\").onFinishChange(function(value){currsearch = value});\r\n    \tsearchgui.domElement.style.position = \"absolute\";\r\n        searchgui.domElement.style.top = \"0px\";\r\n    \tsearchgui.domElement.style.right = \"0px\";\r\n    \t// search closed by default\r\n    \tsearchgui.closed = true;\r\n    \tsearchgui.hide();\r\n        \r\n    \t// input field gui\r\n    \tconst inputparam = {\"Light Name\": \"\"};\r\n    \ttextgui.add(inputparam, \"Light Name\").onChange(function(value)\r\n    \t{\r\n    \t\tcurrname = value;\r\n    \t});\r\n\r\n    \ttextgui.domElement.style.position = \"absolute\";\r\n        textgui.domElement.style.top = \"0px\";\r\n    \ttextgui.domElement.style.right = \"0px\";\r\n\r\n    \t// input closed by default\r\n    \ttextgui.closed = true;\r\n    \ttextgui.hide();\r\n\r\n        // light gui\r\n        var offbutton = {Off:function(){ledstatus = STATUS.OFF;}};\r\n        var onbutton = {On:function(){ledstatus = STATUS.ON;}};\r\n        var normalbutton = {Normal:function(){ledstatus = STATUS.NORMAL}};\r\n        inputparams = {\"MaxBrightness\": \"100\",\r\n                       \"DimmedBrightness\": \"100\",\r\n                       \"MSBrightness\": \"100\",\r\n                       \"HoldTime\": \"0\",\r\n                       \"SyncClock\": true,\r\n                       \"MSSensitivity\": \"Medium\",\r\n                       \"GroupID\": \"\",\r\n                       \"ZoneID\": \"\",\r\n                       \"EditTriggers\": false};\r\n        var firmwarebutton = {FirmwareUpdate:function(){firmwareupdate = true;}};\r\n        var resetkeybutton = {ResetKey:function(){resetkey = true;}};\r\n\r\n        lightgui.add(offbutton, \"Off\");\r\n        lightgui.add(onbutton, \"On\");\r\n        lightgui.add(normalbutton, \"Normal\");\r\n        lightgui.add(inputparams, \"MaxBrightness\").onFinishChange(function(value){currmaxbrightness = value;\r\n                                                                                  changemaxbrightness = true;});\r\n        lightgui.add(inputparams, \"DimmedBrightness\").onFinishChange(function(value){currdimmedbrightness = value;\r\n                                                                                     changedimmedbrightness = true;});\r\n        lightgui.add(inputparams, \"MSBrightness\").onFinishChange(function(value){currmsbrightness = value;\r\n                                                                                 changemsbrightness = true;});\r\n        lightgui.add(inputparams, \"HoldTime\").onFinishChange(function(value){currholdtime = value;\r\n                                                                             changeholdtime = true;});\r\n        lightgui.add(firmwarebutton, \"FirmwareUpdate\");\r\n        lightgui.add(resetkeybutton, \"ResetKey\");\r\n        lightgui.add(inputparams, \"SyncClock\").listen().onFinishChange(function(value){currsyncclock = value;\r\n                                                                                       changesyncclock = true;});\r\n        lightgui.add(inputparams, \"MSSensitivity\", [\"Low\", \"Medium-Low\", \"Medium\", \"Medium-High\", \"High\"]).listen()\r\n                                                        .onFinishChange(function(value){currmssens = value;\r\n                                                                        changemssens = true;});\r\n        lightgui.add(inputparams, \"GroupID\").onFinishChange(function(value){currgroupid = value});\r\n        lightgui.add(inputparams, \"ZoneID\").onFinishChange(function(value){currzoneid = value});\r\n        lightgui.add(inputparams, \"EditTriggers\").listen().onFinishChange(function(value){changetriggers = value;});\r\n\r\n    \tlightgui.domElement.style.position = \"absolute\";\r\n        lightgui.domElement.style.top = \"0px\";\r\n    \tlightgui.domElement.style.right = \"0px\";\r\n\r\n        // closed by default\r\n        inputparams[\"EditTriggers\"] = false;\r\n        lightgui.closed = true;\r\n        changetriggers = false;\r\n        lightgui.hide();\r\n\r\n        // colour picker\r\n        colourparams = {\"GroupColour\": true, \"ZoneColour\": false, \"ID\": \"\"};\r\n        var palette = {colour: \"#7EC0EE\"};\r\n        var triggerpalette = {triggercolour: \"#FF0000\"};\r\n        colourgui.add(colourparams, \"GroupColour\").listen().onFinishChange(\r\n            function(value)\r\n            {\r\n                colourparams[\"GroupColour\"] = true;\r\n                colourparams[\"ZoneColour\"] = false;\r\n                usegroupcolour = true;\r\n            });\r\n        colourgui.add(colourparams, \"ZoneColour\").listen().onFinishChange(\r\n            function(value)\r\n            {\r\n                colourparams[\"GroupColour\"] = false;\r\n                colourparams[\"ZoneColour\"] = true;\r\n                usegroupcolour = false;\r\n            });\r\n        colourgui.add(colourparams, \"ID\").onFinishChange(function(value)\r\n            {\r\n                if (value >= 0 && value <= 255)\r\n                    currcolourid = value;\r\n            });\r\n        colourgui.addColor(palette, \"colour\").onChange(function(value)\r\n            {\r\n                if (currcolourid >= 0 && currcolourid <= 255)\r\n                {\r\n                    var str = \"0x\" + value.slice(1, 7);\r\n\r\n                    if (usegroupcolour)\r\n                        GroupColourArray[currcolourid] = parseInt(str);\r\n                    else\r\n                        ZoneColourArray[currcolourid] = parseInt(str);\r\n                }\r\n            });\r\n        colourgui.addColor(triggerpalette, \"triggercolour\").onChange(function(value)\r\n        {\r\n            var str = \"0x\" + value.slice(1, 7);\r\n            TriggerColour = str;\r\n            for (var i = 0; i < TriggerLineArray.length; ++i)\r\n            {\r\n                TriggerLineArray[i].children[0].material.color.setHex(TriggerColour);\r\n                TriggerLineArray[i].children[1].material.color.setHex(TriggerColour);\r\n            }\r\n        });\r\n        colourgui.closed = true;\r\n        colourgui.hide();\r\n    }\r\n\r\n    InitMQTT()\r\n    {\r\n        mqttClient = new MQTTClient(\"broker.hivemq.com\", 8000, \"clientId\");\r\n    }\r\n    //===================================================================================\r\n\r\n\r\n    // commands =========================================================================\r\n    // provision - add light\r\n    ProvisionRequest(name, key, pos)\r\n    {\r\n        console.log(\"Sent provision request: name: \" + name + \" key: \" + key);\r\n        this.ProvisionResponse(name, key, pos);\r\n    }\r\n\r\n    ProvisionResponse(name, key, pos)\r\n    {\r\n        // key is same as name for now\r\n        console.log(\"Received provision response: name: \" + name + \" key: \" + name);\r\n\r\n        proggui.innerHTML = \"Requesting provision...\";\r\n\r\n        var foo = function() {proggui.innerHTML = \"Provision successful, light added\"};\r\n        var bar = function() {proggui.innerHTML = \"\"};\r\n\r\n        setTimeout(foo, 2000);\r\n        setTimeout(this.AddLightHelper, 2000, name, name, pos);\r\n        setTimeout(bar, 3000);\r\n    }\r\n\r\n    ProvisionStatusRequest(key)\r\n    {\r\n        console.log(\"Sent provision status request: key: \" + key);\r\n        this.ProvisionStatusResponse(key);\r\n    }\r\n\r\n    ProvisionStatusResponse(key)\r\n    {\r\n        console.log(\"Received provision response: key: \" + key + \" status: placeholder\");\r\n    }\r\n    \r\n    RemoveRequest(key)\r\n    {\r\n        console.log(\"Sent remove request: key: \" + key);\r\n        this.RemoveResponse(key);\r\n    }\r\n\r\n    RemoveResponse(key)\r\n    {\r\n        console.log(\"Received remove response: key: \" + key + \" removed\");\r\n        // remove light\r\n        this.RemoveLightHelper(key);\r\n    }\r\n\r\n    NewKeyRequest(oldkey, newkey)\r\n    {\r\n        console.log(\"Sent new key request: oldkey: \" + oldkey + \" newkey: \" + newkey);\r\n        this.NewKeyResponse(oldkey, newkey);\r\n    }\r\n\r\n    NewKeyResponse(oldkey, newkey)\r\n    {\r\n        console.log(\"Received new key response: oldkey: \" + oldkey + \" newkey: \" + newkey);\r\n        LMSUtility.SetKey(oldkey, newkey, LightArray);\r\n    }\r\n\r\n    ResetKeyRequest(key)\r\n    {\r\n        console.log(\"Sent reset key request: key: \" + key);\r\n        this.ResetKeyResponse(key, key);\r\n    }\r\n\r\n    ResetKeyResponse(oldkey, newkey)\r\n    {\r\n        console.log(\"Received reset key response: oldkey: \" + oldkey + \" newkey: \" + newkey);\r\n        LMSUtility.SetKey(oldkey, newkey, LightArray);\r\n    }\r\n\r\n    LEDOnRequest(key)\r\n    {\r\n        console.log(\"Sent LED On request: key: \" + key);\r\n        this.LEDOnResponse(key);\r\n    }\r\n\r\n    LEDOnResponse(key)\r\n    {\r\n        console.log(\"Received LED On response: key: \" + key);\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.status = STATUS.ON;\r\n    }\r\n\r\n    LEDOffRequest(key)\r\n    {\r\n        console.log(\"Sent LED Off request: key: \" + key);\r\n        this.LEDOffResponse(key);\r\n    }\r\n\r\n    LEDOffResponse(key)\r\n    {\r\n        console.log(\"Received LED Off response: key: \" + key);\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.status = STATUS.OFF;\r\n    }\r\n\r\n    LEDNormalRequest(key)\r\n    {\r\n        console.log(\"Sent LED Normal request: key: \" + key);\r\n        this.LEDNormalResponse(key);\r\n    }\r\n\r\n    LEDNormalResponse(key)\r\n    {\r\n        console.log(\"Received LED Normal response: key: \" + key);\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.status = STATUS.NORMAL;\r\n    }\r\n\r\n    SetMaxBrightnessRequest(key, brightness)\r\n    {\r\n        console.log(\"Sent Set MaxBrightness request: key: \" + key + \" maxBrightness: \" + brightness);\r\n        this.SetMaxBrightnessResponse(key, brightness);\r\n    }\r\n\r\n    SetMaxBrightnessResponse(key, brightness)\r\n    {\r\n        console.log(\"Received Set MaxBrightness response: key: \" + key + \" maxBrightness: \" + brightness);\r\n\r\n        if (brightness < 0 || brightness > 100)\r\n            this.ShowMsg(\"Error: invalid brightness\", 3000);\r\n        else\r\n        LMSUtility.SetBrightness(key, brightness, \"max\", LightArray);\r\n    }\r\n\r\n    SetDimmedBrightnessRequest(key, brightness)\r\n    {\r\n        console.log(\"Sent Set DimmedBrightness request: key: \" + key + \" dimmedBrightness: \" + brightness);\r\n        this.SetDimmedBrightnessResponse(key, brightness);\r\n    }\r\n\r\n    SetDimmedBrightnessResponse(key, brightness)\r\n    {\r\n        console.log(\"Received Set DimmedBrightness response: key: \" + key + \" dimmedBrightness: \" + brightness);\r\n    \r\n        if (brightness < 0 || brightness > 100)\r\n            this.ShowError(\"invalid brightness\", 3000);\r\n        else\r\n        LMSUtility.SetBrightness(key, brightness, \"dimmed\", LightArray);\r\n    }\r\n\r\n    SetMSBrightnessRequest(key, brightness)\r\n    {\r\n        console.log(\"Sent Set MSBrightness request: key: \" + key + \" msBrightness: \" + brightness);\r\n        this.SetMSBrightnessResponse(key, brightness);\r\n    }\r\n\r\n    SetMSBrightnessResponse(key, brightness)\r\n    {\r\n        console.log(\"Received Set MSBrightness response: key: \" + key + \" msBrightness: \" + brightness);\r\n\r\n        if (brightness < 0 || brightness > 100)\r\n            this.ShowMsg(\"Error: invalid brightness\", 3000);\r\n        else\r\n        LMSUtility.SetBrightness(key, brightness, \"motion\", LightArray);\r\n    }\r\n\r\n    SetMSSensRequest(key, sens)\r\n    {\r\n        console.log(\"Sent Set MSSens request: key: \" + key + \" msSens: \" + sens);\r\n        this.SetMSSensResponse(key, sens);\r\n    }\r\n\r\n    SetMSSensResponse(key, sens)\r\n    {\r\n        console.log(\"Received Set MSSens response: key: \" + key + \" msSens: \" + sens);\r\n\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.msSens = sens;\r\n    }\r\n\r\n    SetSyncClockRequest(key, sync)\r\n    {\r\n        console.log(\"Sent Set Sync Clock request: key: \" + key + \" sync: \" + sync);\r\n        this.SetSyncClockResponse(key, sync);\r\n    }\r\n\r\n    SetSyncClockResponse(key, sync)\r\n    {\r\n        console.log(\"Received Set Sync Clock response: key: \" + key + \" sync: \" + sync);\r\n\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.syncClock = sync;\r\n    }\r\n\r\n    SetHoldTimeRequest(key, time)\r\n    {\r\n        console.log(\"Sent Set Hold Time request: key: \" + key + \" time: \" + time);\r\n        this.SetHoldTimeResponse(key, time);\r\n    }\r\n\r\n    SetHoldTimeResponse(key, time)\r\n    {\r\n        console.log(\"Received Set Hold Time response: key: \" + key + \" time: \" + time);\r\n\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        if (find)\r\n            find.userData.holdTime = time;\r\n    }\r\n\r\n    FWUpdateRequest(key)\r\n    {\r\n        console.log(\"Sent Firmware Update request: key: \" + key);\r\n        this.FWUpdateResponse(key);\r\n    }\r\n\r\n    FWUpdateResponse(key)\r\n    {\r\n        console.log(\"Received Firmware Update response: key: \" + key);\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n\r\n        if (find.userData.firmwareupdate)\r\n        {\r\n            this.ShowError(\"Error: update in progress\");\r\n        }\r\n        else\r\n        {\r\n            find.userData.firmwareupdate = true;\r\n            proggui.innerHTML = \"Firmware update: 0%\";\r\n\r\n            var foo = function() {proggui.innerHTML = \"Firmware update: 50%\"};\r\n            var bar = function() {proggui.innerHTML = \"Firmware update: 100% (complete)\"; \r\n                                                      find.userData.firmwareupdate = false;};\r\n            var loo = function() {proggui.innerHTML = \"\"};\r\n\r\n            setTimeout(foo, 500);\r\n            setTimeout(bar, 1000);            \r\n            setTimeout(LMSUtility.SetFWVersion, 1000, key, \"2.0\", LightArray);\r\n            setTimeout(loo, 2000);\r\n        }\r\n    }\r\n    //===================================================================================\r\n\r\n\r\n\r\n    // triggers =========================================================================\r\n    // sample activation is just turning it on for now\r\n    DrawTriggerLine(key, triggereekey)\r\n    {\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        var findtrig = LMSUtility.FindLightByKey(triggereekey, LightArray);\r\n\r\n        var start = new THREE.Vector3(find.position.x, find.position.y + 0.2, find.position.z);\r\n        var end = new THREE.Vector3(findtrig.position.x, findtrig.position.y + 0.2, findtrig.position.z);\r\n\r\n        var length = start.distanceTo(end);\r\n        var dir = new THREE.Vector3(end.x - start.x, end.y - start.y, end.z - start.z);\r\n        dir.normalize();\r\n        const arrow = new THREE.ArrowHelper(dir, start, length, parseInt(TriggerColour), 0.5);\r\n        arrow.userData = {triggererkey: key, triggereekey: triggereekey};\r\n\r\n        TriggerLineArray.push(arrow);\r\n        scene.add(arrow);\r\n    }\r\n\r\n    Activate(key)\r\n    {\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        console.log(key + \" activated\");\r\n\r\n        find.userData.status = STATUS.ON;\r\n\r\n        for (var i = 0; i < find.userData.triggerees.length; ++i)\r\n        {\r\n            var triggeree = find.userData.triggerees[i];\r\n            var obj = LMSUtility.FindLightByKey(triggeree, LightArray);\r\n            this.Trigger(obj.userData.key, key);\r\n        }\r\n    }\r\n\r\n    Trigger(key, trigger)\r\n    {\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        \r\n        find.userData.status = STATUS.ON;\r\n        console.log(key + \" triggered by \" + trigger);\r\n    }\r\n\r\n    AddTrigger(key, triggereekey)\r\n    {\r\n        if (key === triggereekey)\r\n        {\r\n            this.ShowMsg(\"Error: Light cannot add itself as trigger\", 3000);\r\n            return;\r\n        }\r\n\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        var findtrig = LMSUtility.FindLightByKey(triggereekey, LightArray);\r\n\r\n        if (find.userData.triggerees.includes(triggereekey))\r\n        {\r\n            this.ShowMsg(\"Error: Trigger already exists\", 3000);\r\n            return;\r\n        }\r\n        //else if(findtrig.userData.triggerees.includes(key))\r\n        //{\r\n        //    this.ShowMsg(\"Error: Circular trigger\", 3000);\r\n        //    return;\r\n        //}\r\n        else\r\n        {\r\n            this.DrawTriggerLine(key, triggereekey);\r\n            this.ShowMsg(\"Trigger added\", 3000);\r\n        }\r\n\r\n        find.userData.triggerees.push(triggereekey);\r\n        findtrig.userData.triggerers.push(key);\r\n    }\r\n\r\n    RemoveTrigger(key, triggereekey)\r\n    {\r\n        var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        var findtrig = LMSUtility.FindLightByKey(triggereekey, LightArray);\r\n\r\n        var triggereeindex = find.userData.triggerees.indexOf(triggereekey);\r\n        var triggererindex = findtrig.userData.triggerers.indexOf(key);\r\n\r\n        var index = null;\r\n\r\n        for (var i = 0; i < TriggerLineArray.length; ++i)\r\n        {\r\n            if (TriggerLineArray[i].userData.triggererkey === key && \r\n                TriggerLineArray[i].userData.triggereekey === triggereekey)\r\n            {\r\n                index = i;\r\n                TriggerLineArray[i].parent.remove(TriggerLineArray[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (index !== null)\r\n            TriggerLineArray.splice(index, 1);\r\n\r\n        if (triggereeindex !== -1)\r\n        {\r\n            this.ShowMsg(\"Trigger removed\", 3000);\r\n            find.userData.triggerees.splice(triggereeindex, 1);\r\n        }\r\n        else\r\n        {\r\n            this.ShowMsg(\"Error: Trigger does not exist\", 3000);\r\n        }\r\n\r\n        if (triggererindex !== -1)\r\n            findtrig.userData.triggerers.splice(triggererindex, 1);\r\n    }\r\n    //===================================================================================\r\n\r\n\r\n\r\n    // helper functions =================================================================\r\n    ShowMsg(message, time)\r\n    {\r\n        console.log(message);\r\n        msg.innerHTML = message;\r\n        setTimeout(this.ClearMsg, time);\r\n    }\r\n\r\n    SearchGUIHelper(value)\r\n    {\r\n        // find and select light\r\n    \tvar light = LMSUtility.FindLightByName(value, LightArray);\r\n    \t// deselect any current lights\r\n    \tselectedlights = [];\r\n    \tthis.ClearDisplayLightData();\r\n    \toutlinePass.selectedObjects = [];\r\n    \t// select light\r\n    \tif (light)\r\n    \t{\r\n    \t\tselectedlights = [light.userData.name];\r\n    \t\tLMSUtility.MoveToLight(light.userData.name, controls, camera, outlinePass, LightArray);\r\n            lightgui.closed = false;\r\n            inputparams[\"SyncClock\"] = light.userData.syncClock;\r\n    \t\tlightgui.show();\r\n        \r\n    \t\tthis.DisplayLightData(light.userData.name);\r\n    \t}\r\n    \telse\r\n    \t{\r\n            this.ShowError(\"light not found\", 3000);\r\n    \t}\r\n        \r\n    \tsearchgui.closed = true;\r\n    \tsearchgui.hide();\r\n    }\r\n\r\n    ToggleSearch()\r\n    {\r\n    \tsearchgui.closed = !searchgui.closed;\r\n    \tif (!searchgui.closed)\r\n    \t{\r\n            searchgui.show();\r\n    \t\ttextgui.closed = true;\r\n            textgui.hide();\r\n            inputparams[\"EditTriggers\"] = false;\r\n            lightgui.closed = true;\r\n            lightgui.hide();\r\n    \t\ttext.innerHTML = \"\";\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tsearchgui.hide();\r\n    \t}\r\n    }\r\n\r\n    ToggleAdd()\r\n    {\r\n    \ttextgui.closed = !textgui.closed;\r\n    \tif (!textgui.closed)\r\n    \t{\r\n    \t\ttextgui.show();\r\n    \t\tsearchgui.closed = true;\r\n            searchgui.hide();\r\n            inputparams[\"EditTriggers\"] = false;\r\n            lightgui.closed = true;\r\n    \t\tlightgui.hide();\r\n    \t\ttext.innerHTML = \"\";\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\ttextgui.hide();\r\n    \t}\r\n\r\n    \tghost.visible = !textgui.closed;\r\n    }\r\n\r\n    LoadModel(model, xscale, yscale, zscale, material = translucentMat)\r\n    {\r\n    \t// load and add test model to scene\r\n    \tfbxloader.load\r\n    \t(\r\n    \t\tserverAddress + \"/resources/\" + model + \".fbx\", function (fbx) \r\n    \t\t\t{\r\n    \t\t\t\tfbx.scale.set(xscale, yscale, zscale);\r\n                \r\n    \t\t\t\tfbx.traverse(function(child)\r\n    \t\t\t\t{\r\n    \t\t\t\t\tif (child instanceof THREE.Mesh)\r\n    \t\t\t\t\t\tchild.material = material;\r\n    \t\t\t\t});\r\n                \r\n    \t\t\t\tscene.add(fbx);\r\n    \t\t\t}, \r\n    \t\t\tundefined, \r\n    \t\t\tfunction (error) {console.error(error);}\r\n    \t);\r\n    }\r\n\r\n    ClearMsg()\r\n    {\r\n    \tmsg.innerHTML = \"\";\r\n    }\r\n\r\n    AnyGUIOpen()\r\n    {\r\n        return !textgui.closed || !searchgui.closed || !lightgui.closed || !colourgui.closed;\r\n    }\r\n    \r\n    AddLight(name, pos)\r\n    {\r\n        // default public key is 0\r\n        this.ProvisionRequest(name, 0, pos);\r\n    }\r\n\r\n    AddLightHelper(name, key, pos)\r\n    {\r\n    \t// init mesh and data\r\n    \tconst lightmesh = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial ({color:GREY}));\r\n        \r\n        LMSUtility.CreateLight(lightmesh, name, key, pos);\r\n    \r\n    \t// add mesh to array (for raycasting/picking)\r\n    \tLightArray.push(lightmesh);\r\n    \r\n    \t// add mesh to scene (for rendering)\r\n    \tscene.add(lightmesh);\r\n    \r\n    \treturn lightmesh;\r\n    }\r\n\r\n    // removing light objects from the scene\r\n    RemoveLight(key)\r\n    {\r\n        this.RemoveRequest(key);\r\n    }\r\n    RemoveLightHelper(key)\r\n    {\r\n        // remove existing triggerers and triggerees\r\n       // var find = LMSUtility.FindLightByKey(key, LightArray);\r\n       var find = LMSUtility.FindLightByKey(key, LightArray);\r\n        for (var i = 0; i < find.userData.triggerers; ++i)\r\n            this.RemoveTrigger(find.userData.triggerers[i], key);\r\n\r\n        for (var j = 0; j < find.userData.triggerees; ++i)\r\n            this.RemoveTrigger(key, find.userData.triggerees[j]);\r\n\r\n    \t// find and remove light from LightArray\r\n    \tvar index = LightArray.findIndex(light => light.userData.key === key);\r\n        \r\n    \t// find and remove object from scene\r\n    \tLightArray[index].parent.remove(LightArray[index]);\r\n    \r\n    \tif(index !== -1)\r\n    \t\tLightArray.splice(index, 1);\r\n    }\r\n\r\n    // setting light status\r\n    SetSelectedLightStatus(selected, status)\r\n    {\r\n    \tfor (var i = 0; i < selected.length; ++i)\r\n    \t{\r\n            var find = LMSUtility.FindLightByName(selected[i], LightArray);\r\n            \r\n    \t\tif (find)\r\n    \t\t{\r\n                if (status === STATUS.ON)\r\n                    this.LEDOnRequest(find.userData.key);\r\n                else if (status === STATUS.OFF)\r\n                    this.LEDOffRequest(find.userData.key);\r\n                else\r\n                    this.LEDNormalRequest(find.userData.key);\r\n    \t\t}\r\n    \t}\r\n    }\r\n    // reset keys\r\n    ResetSelectedLightKeys(selected)\r\n    {\r\n        for (var i = 0; i < selected.length; ++i)\r\n    \t{\r\n            var find = LMSUtility.FindLightByName(selected[i], LightArray);\r\n            \r\n    \t\tif (find)\r\n                this.ResetKeyRequest(find.userData.key);\r\n    \t}\r\n    }\r\n\r\n    // mode - true for group, false for zone\r\n    MultiSelectHelper(id, mode)\r\n    {\r\n        var found = LMSUtility.MultiSelect(id, mode, outlinePass, selectedlights, LightArray)\r\n\r\n        if (found)\r\n        {\r\n            searchgui.closed = true;\r\n            lightgui.closed = false;\r\n            searchgui.hide();\r\n            lightgui.show();\r\n        }\r\n        else\r\n        {\r\n            if (mode)\r\n                this.ShowMsg(\"Error: group empty\", 3000);\r\n            else\r\n                this.ShowMsg(\"Error: zone empty\", 3000);\r\n        }\r\n    }\r\n\r\n    SelectGroup(id)\r\n    {\r\n        this.MultiSelectHelper(id, true);\r\n    }\r\n\r\n    SelectZone(id)\r\n    {\r\n        this.MultiSelectHelper(id, false);\r\n    }\r\n\r\n    LightArrayUpdate()\r\n    {\r\n    \t// only display data of selected light on screen\r\n    \tvar foundselected = false;\r\n    \t// loop through all lights and update data accordingly\r\n    \tfor (var i = 0; i < LightArray.length; ++i)\r\n    \t{\r\n    \t\tvar light = LightArray[i];\r\n\r\n    \t\t// status display (off/on/normal)\r\n            if (light.userData.status === STATUS.OFF)\r\n            {\r\n    \t\t\tlight.material.color.setHex(GREY);\r\n            }\r\n            else\r\n            {\r\n                if (usegroupcolour)\r\n                {\r\n                    if (GroupColourArray.length > 0)\r\n                        light.material.color.setHex(GroupColourArray[light.userData.groupId]);\r\n                    else\r\n                        light.material.color.setHex(LIGHTBLUE);\r\n                }\r\n                else\r\n                {\r\n                    if (ZoneColourArray.length > 0)\r\n                        light.material.color.setHex(ZoneColourArray[light.userData.zoneId]);\r\n                    else\r\n                        light.material.color.setHex(LIGHTBLUE);\r\n                }\r\n            }\r\n\r\n    \t\t// data display\r\n    \t\t// check for currently clicked on light\r\n    \t\tif (selectedlights.length === 1)\r\n    \t\t{\r\n    \t\t\tif (light.userData.name === selectedlights[0])\r\n    \t\t\t{\r\n    \t\t\t\tfoundselected = true;\r\n    \t\t\t\toutlinePass.selectedObjects = [light];\r\n    \t\t\t\tthis.DisplayLightData(light.userData.name);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\telse\r\n    \t\t{\r\n    \t\t\t// selected check\r\n    \t\t\tif (!foundselected && light.userData.selected === true)\r\n    \t\t\t{\r\n    \t\t\t\tfoundselected = true;\r\n    \t\t\t\toutlinePass.selectedObjects = [light];\r\n    \t\t\t\tthis.DisplayLightData(light.userData.name);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \r\n    \t// if none are selected, turn off data display\r\n    \tif (!foundselected)\r\n    \t\tthis.ClearDisplayLightData();\r\n    }\r\n    // display data of light given name/ids\r\n    DisplayLightData(name)\r\n    {\r\n    \tvar find = LMSUtility.FindLightByName(name, LightArray);\r\n    \tvar laststatus;\r\n\r\n    \tif (find.userData.status === STATUS.OFF)\r\n    \t\tlaststatus = \"OFF\";\r\n    \telse if (find.userData.status === STATUS.ON)\r\n    \t\tlaststatus = \"ON\";\r\n    \telse\r\n    \t\tlaststatus = \"NORMAL\";\r\n    \t// <br/> is a newline\r\n        text.innerHTML = \"Name: \" + find.userData.name + \"<br/>\" +\r\n                         \"Key: \" + find.userData.key + \"<br/>\" +\r\n                         \"FW Version: \" + find.userData.fwVersion + \"<br/>\" +\r\n                         \"Group: \" + find.userData.groupId + \"<br/>\" +\r\n                         \"Zone: \" + find.userData.zoneId + \"<br/>\" + \r\n    \t\t\t\t\t \"Last Heard: \" + find.userData.lastHeard + \"<br/>\" +\r\n    \t\t\t\t\t \"Last Status: \" + laststatus + \"<br/>\" +\r\n                         \"PWM Level: \" + find.userData.pwm + \"<br/>\" +\r\n                         \"MS Sensitivity: \" + find.userData.msSens + \"<br/>\" +\r\n                         \"Sync Clock: \" + find.userData.syncClock + \"<br/>\" +\r\n                         \"Max Brightness: \" + find.userData.maxBrightness + \"<br/>\" +\r\n                         \"Dimmed Brightness: \" + find.userData.dimmedBrightness + \"<br/>\" +\r\n                         \"MS Brightness: \" + find.userData.msBrightness + \"<br/>\" +\r\n                         \"Hold Time: \" + find.userData.holdTime + \"<br/>\" +\r\n                         \"Triggerers: \" + find.userData.triggerers + \"<br/>\" +\r\n                         \"Triggerees: \" + find.userData.triggerees;\r\n    \ttext.style.display = \"block\";\r\n    \t// top and left specifies the position of the data\r\n    \t//text.style.top = window.innerHeight - 100 + \"px\";\r\n    \t//text.style.left = 500 + \"px\";\r\n    }\r\n    // clear display\r\n    ClearDisplayLightData()\r\n    {\r\n    \ttext.innerHTML = \"\";\r\n    \ttext.style.display = \"none\";\r\n    }\r\n\r\n    // file saving and loading\r\n    async FetchData(j = \"default\")\r\n    {\r\n    \tlet url = serverAddress + \"resources/\" + j + \".json\";\r\n    \tconst response = await fetch(url);\r\n    \tif(response.ok)\r\n    \t{\r\n    \t\tconst data = await response.json();\r\n\r\n    \t\treturn data;\r\n    \t}\r\n    }\r\n    // update light and plane arrays with loaded objects\r\n    UpdateArrays()\r\n    {\r\n    \t// add lights and plane to array\r\n    \tscene.traverse(function (object)\r\n    \t{\r\n    \t\t// lights\r\n    \t\tif (object.userData.name)\r\n    \t\t{\r\n                object.material.opacity = 0.3 + object.maxBrightness / 100 * 0.7;\r\n                LightArray.push(object);\r\n    \t\t}\r\n    \t\telse if (object.isMesh)\r\n    \t\t{\r\n                if (object.geometry.type === \"PlaneBufferGeometry\" || \r\n                    object.geometry.type === \"PlaneGeometry\")\r\n                {\r\n    \t\t\t\tPlaneArray.push(object);\r\n                }\r\n                else if (object.geometry.type === \"SphereBufferGeometry\" || \r\n                         object.geometry.type === \"SphereGeometry\")\r\n                {\r\n                    ghost = object;\r\n                }\r\n            }\r\n            // load colours\r\n            else if (object.name === \"colours\")\r\n            {\r\n                GroupColourArray = object.userData.groupArray;\r\n                ZoneColourArray = object.userData.zoneArray;\r\n                TriggerColour = object.userData.triggerColour;\r\n            }\r\n        });\r\n    }\r\n\r\n    UpdateTriggers()\r\n    {\r\n        for (var i = 0; i < LightArray.length; ++i)\r\n        {\r\n            for (var j = 0; j < LightArray[i].userData.triggerees.length; ++j)\r\n            {\r\n                this.DrawTriggerLine(LightArray[i].userData.key, LightArray[i].userData.triggerees[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // load scene from json\r\n    async LoadScene(s = \"default\")\r\n    {\r\n    \tconst out = await this.FetchData(s);\r\n\r\n    \tif (out)\r\n    \t{\r\n    \t\tfilename = s;\r\n    \t\t// clear existing scene\r\n    \t\twhile (scene.children.length > 0)\r\n    \t\t{\r\n    \t\t\tscene.remove(scene.children[0]);\r\n    \t\t}\r\n\r\n    \t\t// clear existing data\r\n    \t\tfor (var i = 0; i < LightArray.length; ++i)\r\n    \t\t{\r\n    \t\t\t// find and remove object from scene\r\n    \t\t\tif(LightArray[i].parent)\r\n    \t\t\t\tLightArray[i].parent.remove(LightArray[i]);\r\n    \t\t}\r\n    \t\tLightArray = [];\r\n            PlaneArray = [];\r\n\r\n    \t\t// add objects from json\r\n    \t\tsceneloader.load(serverAddress + \"resources/\" + s + \".json\", function(object) \r\n    \t\t{\r\n                scene.add(object);\r\n                scene = object;\r\n    \t\t});\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tconsole.log(\"failed to load data\");\r\n        }\r\n\r\n        setTimeout(this.UpdateArrays, 1000);\r\n        setTimeout(this.UpdateTriggers, 1200);\r\n    }\r\n    // save scene to json\r\n    DownloadScene()\r\n    {\r\n    \tvar saveData = (function () \r\n    \t{\r\n    \t\tvar a = document.createElement(\"a\");\r\n    \t\tdocument.body.appendChild(a);\r\n    \t\ta.style = \"display: none\";\r\n            return function (data, fileName) \r\n            {\r\n    \t\t\tvar json = JSON.stringify(data, null, 2),\r\n    \t\t\t\tblob = new Blob([json], {type: \"octet/stream\"}),\r\n    \t\t\t\turl = window.URL.createObjectURL(blob);\r\n    \t\t\ta.href = url;\r\n    \t\t\ta.download = fileName;\r\n    \t\t\ta.click();\r\n    \t\t\twindow.URL.revokeObjectURL(url);\r\n    \t\t};\r\n    \t}());\r\n\r\n        scene.traverse(function(object)\r\n        {\r\n            if (object.name === \"colours\")\r\n                object.userData = {groupArray: GroupColourArray, zoneArray: ZoneColourArray,\r\n                                   triggerColour: TriggerColour};\r\n        });\r\n\r\n        for (var i = 0; i < TriggerLineArray.length; ++i)\r\n            TriggerLineArray[i].parent.remove(TriggerLineArray[i]);\r\n\r\n        TriggerLineArray = [];\r\n\r\n        var save = scene.toJSON();\r\n        saveData(save, filename.replace(/\\..+$/, '') + \".json\");\r\n        \r\n        this.UpdateTriggers();\r\n    }\r\n    //===================================================================================\r\n\r\n\r\n\r\n    // \"main\"\r\n\tcomponentDidMount() \r\n\t{\r\n        // define server address\r\n        serverAddress = \"http://10.1.11.197:8080/\";\r\n\r\n        // scene init\r\n        this.InitThreeJs();\r\n        this.InitCameraControls();\r\n        this.InitSceneLights();\r\n        this.InitOutline();\r\n        this.InitGeometry();\r\n        this.InitLoaders();\r\n        this.InitPicking();\r\n        this.InitTextDisplay();\r\n        this.InitGUI();\r\n        this.InitMQTT();\r\n\r\n        // load default scene\r\n        this.LoadScene();\r\n\r\n        // call render loop\r\n\t\tthis.DrawScene();\r\n    }\r\n\r\n\r\n\r\n    // render loop ======================================================================\r\n    DrawScene()\r\n    {\r\n        requestAnimationFrame(this.DrawScene);\r\n        // update light data\r\n        this.LightArrayUpdate();\r\n\r\n        // searchgui helper \r\n        if (currsearch)\r\n        {\r\n            this.SearchGUIHelper(currsearch);\r\n            currsearch = null;\r\n        }\r\n\r\n        if (selectedlights.length > 0)\r\n        {\r\n            // light gui helpers\r\n            if (ledstatus)\r\n            {\r\n                this.SetSelectedLightStatus(selectedlights, ledstatus);\r\n                ledstatus = null;\r\n            }\r\n\r\n            if (changemaxbrightness)\r\n            {\r\n                for (var i = 0; i < selectedlights.length; ++i)\r\n                    this.SetMaxBrightnessRequest(LMSUtility.FindLightByName(selectedlights[i], LightArray).userData.key, \r\n                                                 currmaxbrightness);\r\n                changemaxbrightness = null;\r\n            }\r\n\r\n            if (changedimmedbrightness)\r\n            {\r\n                for (var j = 0; i < selectedlights.length; ++j)\r\n                    this.SetDimmedBrightnessRequest(LMSUtility.FindLightByName(selectedlights[j], LightArray).userData.key, \r\n                                                    currdimmedbrightness);\r\n                changedimmedbrightness = null;\r\n            }\r\n\r\n            if (changemsbrightness)\r\n            {\r\n                for (var k = 0; k < selectedlights.length; ++k)\r\n                    this.SetMSBrightnessRequest(LMSUtility.FindLightByName(selectedlights[k], LightArray).userData.key, \r\n                                                                    currmsbrightness);\r\n                changemsbrightness = null;\r\n            }\r\n\r\n            if (changeholdtime)\r\n            {\r\n                for (var l = 0; l < selectedlights.length; ++l)\r\n                    this.SetHoldTimeRequest(LMSUtility.FindLightByName(selectedlights[l], LightArray).userData.key, currholdtime);\r\n                changeholdtime = null;\r\n            }\r\n\r\n            if (changesyncclock)\r\n            {\r\n                for (var m = 0; m < selectedlights.length; ++m)\r\n                    this.SetSyncClockRequest(LMSUtility.FindLightByName(selectedlights[m], LightArray).userData.key, currsyncclock);\r\n                changesyncclock = null;\r\n            }\r\n\r\n            if (changemssens)\r\n            {\r\n                for (var n = 0; n < selectedlights.length; ++n)\r\n                    this.SetMSSensRequest(LMSUtility.FindLightByName(selectedlights[n], LightArray).userData.key, currmssens);\r\n                    changemssens = null;\r\n            }\r\n\r\n            if (firmwareupdate)\r\n            {\r\n                for (var o = 0; o < selectedlights.length; ++o)\r\n                    this.FWUpdateRequest(LMSUtility.FindLightByName(selectedlights[o], LightArray).userData.key);\r\n                firmwareupdate = null;\r\n            }\r\n\r\n            if (resetkey)\r\n            {\r\n                this.ResetSelectedLightKeys(selectedlights);\r\n                resetkey = null;\r\n            }\r\n\r\n            // uses selectedlights array to set id\r\n            if (currgroupid)\r\n            {\r\n                LMSUtility.SetGroup(currgroupid, selectedlights, LightArray);\r\n                currgroupid = null;\r\n            }\r\n\r\n            if (currzoneid)\r\n            {\r\n                LMSUtility.SetZone(currzoneid, selectedlights, LightArray);\r\n                currzoneid = null;\r\n            }\r\n        }\r\n\r\n        // keeps focus on input field for light name\r\n        var tmp = document.getElementsByTagName(\"INPUT\");\r\n        // 0 - search\r\n        // 1 - input\r\n        if (!textgui.closed)\r\n        {\r\n            tmp[1].focus();\r\n            tmp[0].blur();\r\n        }\r\n        else if (!searchgui.closed)\r\n        {\r\n            tmp[1].blur();\r\n            tmp[0].focus();\r\n        }\r\n\r\n        // intersection checks for picking\r\n        raycaster.setFromCamera(mouse, camera);\r\n\r\n        // disable orbitcontrols if viewing\r\n        controls.enabled = textgui.closed;\r\n\r\n        const intersects = raycaster.intersectObjects(LightArray);\r\n        const planeintersects = raycaster.intersectObjects(PlaneArray);\r\n        \r\n        // light\r\n        if(intersects.length > 0)\r\n        {\r\n            if(lintersect !== intersects[0].object)\r\n            {\r\n                // select the intersected object\r\n                lintersect = intersects[0].object;\r\n                // onenter\r\n                // check if light has been clicked on\r\n                if (selectedlights.length > 0)\r\n                {\r\n                    // clear display\r\n                    for (var p = 0; p < LightArray.length; ++p)\r\n                        LightArray[p].userData.selected = false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // onstay\r\n                intersects[0].object.userData.selected = true;\r\n\r\n                if(Lmouseup)\r\n                {\t\r\n                    // don't have to set lmouseup to false, done at end of loop\r\n                    // check if in view mode\r\n                    if(textgui.closed)\r\n                    {\r\n                        if (changetriggers)\r\n                        {\r\n                            this.AddTrigger(LMSUtility.FindLightByName(selectedlights[0], LightArray).userData.key, \r\n                                            intersects[0].object.userData.key);\r\n                        }\r\n                        else\r\n                        {\r\n                            // if single selection\r\n                            if (!selectedStart && selectedlights.length === 0)\r\n                            {\r\n                                // select this light\r\n                                selectedlights = [intersects[0].object.userData.name];\r\n                                LMSUtility.MoveToLight(lintersect.userData.name, controls, camera, outlinePass, LightArray);\r\n                            }\r\n                            lightgui.closed = false;\r\n                            inputparams[\"SyncClock\"] = intersects[0].object.userData.syncClock;\r\n                            lightgui.show();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // removing\r\n                if(Rmouseup)\r\n                {\r\n                    // check if in add mode\r\n                    if(!textgui.closed)\r\n                        this.RemoveLight(lintersect.userData.key);\r\n                    else if (changetriggers)\r\n                        this.RemoveTrigger(LMSUtility.FindLightByName(selectedlights[0], LightArray).userData.key, \r\n                                           intersects[0].object.userData.key);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(lintersect)\r\n            {\r\n                // onexit\r\n                // clear display and outline if no light clicked\r\n                if (selectedlights.length < 1 && !selectedStart)\r\n                {\r\n                    this.ClearDisplayLightData();\r\n                    outlinePass.selectedObjects = [];\r\n                }\r\n\r\n                lintersect.userData.selected = false;\r\n            }\r\n            lintersect = null;\r\n        }\r\n\r\n        // plane\r\n        if(!textgui.closed)\r\n        {\r\n            if(planeintersects.length > 0)\r\n            {\r\n                if (pintersect !== planeintersects[0].object)\r\n                {\r\n                    pintersect = planeintersects[0].object;\r\n                    // onenter\r\n                }\r\n                else\r\n                {\r\n                    // onstay\r\n                    if(Lmouseup)\r\n                    {\r\n                        // intersects[0].point returns vector3 of collision point\r\n                        if(currname === \"\")\r\n                            this.AddLight(\"lighttest\", planeintersects[0].point);\r\n                        else\r\n                            this.AddLight(currname, planeintersects[0].point);\r\n                    }\r\n                \r\n                    // update \"ghost\" sphere\r\n                    if (!textgui.closed)\r\n                    {\r\n                        ghost.position.x = planeintersects[0].point.x;\r\n                        ghost.position.y = planeintersects[0].point.y;\r\n                        ghost.position.z = planeintersects[0].point.z;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(pintersect)\r\n                {\r\n                    // onexit\r\n                }\r\n                pintersect = null;\r\n            }\r\n        }\r\n\r\n        // reset mouse click event bools\t\r\n        Lmouseup = false;\r\n        Rmouseup = false;\r\n\r\n        // update the global transform of the camera object\r\n        camera.updateMatrixWorld();\r\n        // camera controls update\r\n        controls.update();\r\n        // render (use composer.render if postprocessing is used)\r\n        composer.render();\r\n    }\r\n    //===================================================================================\r\n\r\n\r\n\r\n    // cleanup\r\n    componentWillUnmount()\r\n    {\r\n        window.removeEventListener(\"resize\", this.onWindowResize);\r\n        controls.removeEventListener(\"change\", this.onControlsChange);\r\n        document.removeEventListener(\"contextmenu\", this.onContextMenu);\r\n        //this.renderer.removeEventListener(\"pointerup\", this.onDocumentMouseUp);\r\n        //this.renderer.removeEventListener(\"pointerdown\", this.onDocumentMouseDown);\r\n        document.removeEventListener(\"keydown\", this.onKeyDown);\r\n        document.removeEventListener(\"keyup\", this.onKeyUp);\r\n        document.removeEventListener(\"pointermove\", this.onDocumentMouseMove);\r\n    }\r\n\r\n\r\n\r\n    // event handlers ===================================================================\r\n    // resize\r\n    onWindowResize()\r\n    {\r\n        width = window.innerWidth * widthscale;\r\n        height = window.innerHeight * heightscale;\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(width, height);\r\n    }\r\n    // camera controls\r\n    onControlsChange()\r\n    {\r\n        v.copy(controls.target);\r\n        controls.target.clamp(minPan, maxPan);\r\n        v.sub(controls.target);\r\n        camera.position.sub(v);\r\n    }\r\n    // context menu\r\n    onContextMenu(event)\r\n    {\r\n\t    event.preventDefault();\r\n\t    return false;\r\n    }\r\n    // mouse\r\n    onDocumentMouseUp(event)\r\n    {\r\n        event.preventDefault();\r\n\r\n        switch(event.which)\r\n        {\r\n            // lmb\r\n            case 1:\r\n                Lmouseup = true;\r\n                controls.enableRotate = true;\r\n\r\n                var offsetx = renderer.domElement.getBoundingClientRect().left;\r\n                var offsety = renderer.domElement.getBoundingClientRect().top;\r\n\r\n                selectionBox.endPoint.set\r\n                (\r\n                     ((event.clientX - offsetx) / width) * 2 - 1,\r\n                    -((event.clientY - offsety) / height) * 2 + 1,\r\n                     0.5\r\n                )\r\n    \r\n                // deselect light if left clicked in view mode\r\n                if (textgui.closed && (selectedlights.length > 0) && !selectedStart && !changetriggers)\r\n                {\r\n                    var tmp = LMSUtility.FindLightByName(selectedlights[0], LightArray);\r\n                    if(tmp)\r\n                    {\r\n                        tmp.userData.selected = false;\r\n                        searchgui.closed = true;\r\n                        searchgui.hide();\r\n                        selectedlights = [];\r\n                        this.ClearDisplayLightData();\r\n                        outlinePass.selectedObjects = [];\r\n                    }\r\n                }\r\n    \r\n                if (selectedStart)\r\n                {\r\n                    selectedStart = false;\r\n                    if (selectedlights.length > 0)\r\n                    {\r\n                        lightgui.closed = false;\r\n                        lightgui.show();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (!changetriggers)\r\n                    {\r\n                        searchgui.closed = true;\r\n                        inputparams[\"EditTriggers\"] = false;\r\n                        lightgui.closed = true;\r\n                        colourgui.closed = true;\r\n                        searchgui.hide();\r\n                        lightgui.hide();\r\n                        colourgui.hide();\r\n                    }\r\n                }\r\n                break;\r\n            // rmb\r\n            case 3:\r\n                Rmouseup = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    onDocumentMouseDown(event)\r\n    {\r\n        event.preventDefault();\r\n\r\n        switch(event.which)\r\n        {\r\n            // lmb\r\n            case 1:\r\n                if (LCTRLdown)\r\n                {\r\n                    selectedStart = true;\r\n                    selectedlights = [];\r\n                    outlinePass.selectedObjects = [];\r\n                    \r\n                    var offsetx = renderer.domElement.getBoundingClientRect().left;\r\n                    var offsety = renderer.domElement.getBoundingClientRect().top;\r\n\r\n                    selectionBox.startPoint.set\r\n                    (\r\n                         ((event.clientX - offsetx) / width) * 2 - 1,\r\n                        -((event.clientY - offsety) / height) * 2 + 1,\r\n                         0.5\r\n                    );\r\n                }\r\n    \r\n                break;\r\n            // rmb\r\n            case 3:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    // key presses\r\n    onKeyDown(event)\r\n    {\r\n\t    // disable ctrl f and use my own\r\n\t    if (textgui.closed && (event.code === \"F3\" || (event.ctrlKey && event.code === \"KeyF\")))\r\n\t    {\r\n\t    \tevent.preventDefault();\r\n\t    \tthis.ToggleSearch();\r\n\t    }\r\n\r\n\t    switch(event.code)\r\n\t    {\r\n\t    \tcase \"ControlLeft\":\r\n\t    \t\tLCTRLdown = true;\r\n\t    \t\tcontrols.enablePan = false;\r\n\t    \t\tcontrols.enableRotate = false;\r\n\t    \t\tbreak;\r\n\t    \tcase \"Space\":\r\n\t    \t\tif (LCTRLdown)\r\n\t    \t\t\ttoggle = true;\r\n\t    \t\tbreak;\r\n\t    \tdefault:\r\n\t    \t\tbreak;\r\n\t    }\r\n    }\r\n    onKeyUp(event)\r\n    {\r\n        switch(event.code)\r\n        {\r\n            case \"Space\":\r\n                // toggle add/view mode (with lctrl pressed)\r\n                if (toggle)\r\n                {\r\n                    toggle = false;\r\n                    this.ToggleAdd();\r\n                }\r\n                break;\r\n            case \"KeyS\":\r\n                // save into json and download\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.DownloadScene();\r\n                    //DownloadData();\r\n                break;\r\n            case \"KeyQ\":\r\n                // load c1basement1\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.LoadScene(\"c1basement1\");\r\n                break;\r\n            case \"KeyW\":\r\n                // load c1basement2\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.LoadScene(\"c1basement2\");\r\n                break;\r\n            case \"KeyR\":\r\n                if (this.AnyGUIOpen() === false)\r\n                LMSUtility.ResetCamera(controls, camera);\r\n                break;\r\n            case \"KeyA\":\r\n                if (selectedlights.length === 1)\r\n                    this.Activate(LMSUtility.FindLightByName(selectedlights[0], LightArray).userData.key);\r\n                break;\r\n            case \"KeyT\":\r\n                if (this.AnyGUIOpen() === false)\r\n                    LMSUtility.ToggleTriggerLines(TriggerLineArray);\r\n                break;\r\n            case \"KeyG\":\r\n                if (this.AnyGUIOpen() === false)\r\n                {\r\n                    usegroupcolour = !usegroupcolour;\r\n                    colourparams[\"GroupColour\"] = usegroupcolour;\r\n                    colourparams[\"ZoneColour\"] = !usegroupcolour;\r\n                }\r\n                break;\r\n            case \"KeyC\":\r\n                if (this.AnyGUIOpen() === false)\r\n                {\r\n                    colourgui.closed = false;\r\n                    colourgui.show();\r\n                }\r\n                break;\r\n            case \"ControlLeft\":\r\n                LCTRLdown = false;\r\n                controls.enablePan = true;\r\n                controls.enableRotate = true;\r\n                break;\r\n            case \"Digit1\":\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.SelectGroup(1);\r\n                break;\r\n            case \"Digit2\":\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.SelectGroup(2);\r\n                break;\r\n            case \"Digit3\":\r\n                if (this.AnyGUIOpen() === false)\r\n                    this.SelectZone(1);\r\n                break;\r\n            case \"Digit4\":\r\n               if (this.AnyGUIOpen() === false)\r\n                   this.SelectZone(2);\r\n               break;\r\n            case \"Digit5\":\r\n             if (this.AnyGUIOpen() === false)\r\n                 this.SelectGroup(255);\r\n             break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    // mouse move\r\n    onDocumentMouseMove(event)\r\n    {\r\n        event.preventDefault();\r\n        \r\n        var offsetx = renderer.domElement.getBoundingClientRect().left;\r\n        var offsety = renderer.domElement.getBoundingClientRect().top;\r\n\r\n        mouse.x =  ((event.clientX - offsetx) / width) * 2 - 1;\r\n        mouse.y = -((event.clientY - offsety) / height) * 2 + 1;\r\n\r\n        // selection\r\n        if (selectionBoxHelper.isDown && LCTRLdown)\r\n        {\r\n            selectionBox.endPoint.set\r\n            (\r\n                 ((event.clientX - offsetx) / width) * 2 - 1,\r\n                -((event.clientY - offsety) / height) * 2 + 1,\r\n                0.5 \r\n            );\r\n    \r\n            const allSelected = selectionBox.select();\r\n            for (var i = 0; i < allSelected.length; ++i)\r\n            {\r\n                // check if object selected is a light\r\n                if (allSelected[i].userData.name)\r\n                {\r\n                    // select object\r\n                    if (selectedlights.indexOf(allSelected[i].userData.name) === -1)\r\n                    {\r\n                        outlinePass.selectedObjects.push(allSelected[i]);\r\n                        selectedlights.push(allSelected[i].userData.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //===================================================================================\r\n\r\n    // render function and canvas size\r\n    render() \r\n    {\r\n\t    return (<div \r\n            style={{ \r\n                position: \"absolute\", \r\n                width: \"100%\", height: \"100%\",\r\n                //left: \"15%\", top: \"15%\" \r\n            }}\r\n\t        ref={mount => {this.mount = mount}}\r\n\t    />)\r\n\t}\r\n}\r\n\r\nexport default ThreeJsScene;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\LMSUtility.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\MQTTClient.js",[],{"ruleId":"26","severity":1,"message":"27","line":7,"column":7,"nodeType":"28","messageId":"29","endLine":7,"endColumn":10},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"26","severity":1,"message":"34","line":74,"column":7,"nodeType":"28","messageId":"29","endLine":74,"endColumn":12},{"ruleId":"26","severity":1,"message":"35","line":425,"column":9,"nodeType":"28","messageId":"29","endLine":425,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["36"],"no-negated-in-lhs",["37"],"'GREEN' is assigned a value but never used.","'mqttClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]