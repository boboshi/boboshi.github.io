[{"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\index.js":"1","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\threejsscene.js":"2","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\LMSUtility.js":"3","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\MQTTClient.js":"4","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LoginForm.js":"5","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\Main.js":"6","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SignUpForm.js":"7","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Timestamp.js":"8","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Dashboard.js":"9","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Dropdown.js":"10","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SearchBar.js":"11","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Notification.js":"12","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\UserDropdown.js":"13","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardView.js":"14","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SidebarIcon.js":"15","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardConfig.js":"16","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardUserManagement.js":"17","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardAdd.js":"18","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardLight.js":"19","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardPower.js":"20","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardLightCycle.js":"21","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\BlockLights.js":"22","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\ActiveLights.js":"23","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumption.js":"24","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LightControl.js":"25","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\ActivityLog.js":"26","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\GatewayInfo.js":"27","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LightStatus.js":"28","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumptionOption.js":"29","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumptionGraph.js":"30","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\GenericDropdown.js":"31"},{"size":147,"mtime":1612427065028,"results":"32","hashOfConfig":"33"},{"size":67650,"mtime":1611040831685,"results":"34","hashOfConfig":"33"},{"size":7429,"mtime":1610698983215,"results":"35","hashOfConfig":"33"},{"size":1572,"mtime":1610612589850,"results":"36","hashOfConfig":"33"},{"size":3857,"mtime":1613445458384,"results":"37","hashOfConfig":"33"},{"size":1134,"mtime":1613445644781,"results":"38","hashOfConfig":"33"},{"size":4581,"mtime":1612505959688,"results":"39","hashOfConfig":"33"},{"size":1701,"mtime":1611719250984,"results":"40","hashOfConfig":"33"},{"size":19706,"mtime":1612842268144,"results":"41","hashOfConfig":"33"},{"size":2262,"mtime":1612941342463,"results":"42","hashOfConfig":"33"},{"size":832,"mtime":1612503855428,"results":"43","hashOfConfig":"33"},{"size":5093,"mtime":1613447940243,"results":"44","hashOfConfig":"33"},{"size":4237,"mtime":1612842024635,"results":"45","hashOfConfig":"33"},{"size":1345,"mtime":1612843245132,"results":"46","hashOfConfig":"33"},{"size":628,"mtime":1612840393320,"results":"47","hashOfConfig":"33"},{"size":313,"mtime":1612427060480,"results":"48","hashOfConfig":"33"},{"size":319,"mtime":1612412109669,"results":"49","hashOfConfig":"33"},{"size":263,"mtime":1612432858489,"results":"50","hashOfConfig":"33"},{"size":273,"mtime":1612432867141,"results":"51","hashOfConfig":"33"},{"size":273,"mtime":1612432895497,"results":"52","hashOfConfig":"33"},{"size":299,"mtime":1612432924372,"results":"53","hashOfConfig":"33"},{"size":5154,"mtime":1612845058937,"results":"54","hashOfConfig":"33"},{"size":4679,"mtime":1612778541945,"results":"55","hashOfConfig":"33"},{"size":6390,"mtime":1612931296380,"results":"56","hashOfConfig":"33"},{"size":3099,"mtime":1612953798959,"results":"57","hashOfConfig":"33"},{"size":914,"mtime":1612520849620,"results":"58","hashOfConfig":"33"},{"size":927,"mtime":1612519954308,"results":"59","hashOfConfig":"33"},{"size":898,"mtime":1612521012728,"results":"60","hashOfConfig":"33"},{"size":638,"mtime":1612854219386,"results":"61","hashOfConfig":"33"},{"size":15798,"mtime":1612938436780,"results":"62","hashOfConfig":"33"},{"size":2369,"mtime":1612952137987,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1lz191p",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\index.js",[],["134","135"],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\threejsscene.js",[],["136","137"],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\LMSUtility.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\MQTTClient.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LoginForm.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\Main.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SignUpForm.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Timestamp.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Dashboard.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Dropdown.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SearchBar.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\Notification.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\UserDropdown.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardView.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\SidebarIcon.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardConfig.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardUserManagement.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardAdd.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardLight.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardPower.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\DashboardLightCycle.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\BlockLights.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\ActiveLights.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumption.js",[],"C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LightControl.js",["138","139","140","141","142","143"],"import React, {useState, useEffect, useRef} from \"react\";\r\n\r\nimport GenericDropdown from \"../components/GenericDropdown\";\r\n\r\nimport Header from \"../resources/dashboard/dashboard header.svg\";\r\nimport ControlIcon from \"../resources/dashboard/settings_power-24px.svg\";\r\n\r\nfunction EnergyConsumption(props)\r\n{\r\n    const selectFloorRef = useRef();\r\n    const selectLightsRef = useRef();\r\n\r\n    const [floorOptions, setFloorOptions] = useState([]);\r\n    const [lightOptions, setLightOptions] = useState([]);\r\n\r\n    const [selectedFloor, setSelectedFloor] = useState(\"\");\r\n    const [selectedLights, setSelectedLights] = useState(\"\");\r\n\r\n    useEffect(() =>\r\n    {\r\n        // simulate getting data  \r\n        setFloorOptions([\"Level 1-1\", \"Level 2-1\", \"Level 3-1\"]);\r\n        setLightOptions([\"All Lights\"]);\r\n    }, []);\r\n\r\n    function handleOnButtonClick()\r\n    {\r\n\r\n    }\r\n\r\n    function handleOffButtonClick()\r\n    {\r\n\r\n    }\r\n\r\n    function handleNormalButtonClick()\r\n    {\r\n\r\n    }\r\n\r\n    function handleLoopButtonClick()\r\n    {\r\n\r\n    }\r\n\r\n    return(\r\n        <div className = \"dashboard-page-view-control-container\">\r\n            <img alt = \"\" src = {ControlIcon} className = \"dashboard-page-view-control-icon\"></img>\r\n            <div className = \"dashboard-page-view-header-default\">\r\n                <h1 className = \"dashboard-page-view-header-text\">LIGHT CONTROL</h1>\r\n                <img alt = \"\" src = {Header} className = \"dashboard-page-view-headerimg-default\"></img>\r\n            </div>\r\n            {/* dropdown and button headers */}\r\n            <div className = \"dashboard-page-view-control-floor-header\">SELECT FLOOR</div>\r\n            <div className = \"dashboard-page-view-control-light-header\">SELECT LIGHT</div>\r\n            <div className = \"dashboard-page-view-control-lighting-header\">LIGHTING CONTROL</div>\r\n            <div className = \"dashboard-page-view-control-admin-header\">ADMIN CONTROL</div>\r\n            <div className = \"dashboard-page-view-border-default\"></div>\r\n            {/* dropdown lists */}\r\n            {floorOptions && lightOptions &&\r\n                <div>\r\n                    <div className = \"dashboard-page-view-selectfloor-ddcontainer\" style = {{zIndex: 10}}>\r\n                        <GenericDropdown\r\n                            ref = {selectFloorRef}\r\n                            options = {floorOptions}\r\n                            selectOption = {setSelectedFloor}\r\n                        ></GenericDropdown>\r\n                    </div>\r\n                    <div className = \"dashboard-page-view-selectlight-ddcontainer\"  style = {{zIndex: 9}}>\r\n                        <GenericDropdown\r\n                            ref = {selectLightsRef}\r\n                            options = {lightOptions}\r\n                            selectOption = {setSelectedLights}\r\n                        ></GenericDropdown>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {/* buttons */}\r\n            <div className = \"dashboard-page-view-control-onbutton\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EnergyConsumption;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\ActivityLog.js",["144"],"import React, {useState, useEffect} from \"react\";\r\n\r\nimport Header from \"../resources/dashboard/activity header.svg\";\r\nimport ActivityIcon from \"../resources/dashboard/Icon material-event-note.svg\";\r\n\r\nfunction ActivityLog(props)\r\n{\r\n    useEffect(() =>\r\n    {\r\n        // simulate getting data\r\n    }, []);\r\n\r\n    return(\r\n        <div className = \"dashboard-page-view-activity-container\">\r\n            <img alt = \"\" src = {ActivityIcon} className = \"dashboard-page-view-activity-icon\"></img>\r\n            <div className = \"dashboard-page-view-activity-header\">\r\n                <h1 className = \"dashboard-page-view-activity-header-text\">ACTIVITY LOG</h1>\r\n                <img alt = \"\" src = {Header} className = \"dashboard-page-view-activity-headerimg\"></img>\r\n            </div>\r\n            <div className = \"dashboard-page-view-border-default\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActivityLog;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\GatewayInfo.js",["145"],"import React, {useState, useEffect} from \"react\";\r\n\r\nimport GatewayHeader from \"../resources/dashboard/gateway header.svg\";\r\nimport GatewayIcon from \"../resources/dashboard/Icon awesome-laptop-code.svg\";\r\n\r\nfunction GatewayInfo(props)\r\n{\r\n    useEffect(() =>\r\n    {\r\n        // simulate getting data\r\n    }, []);\r\n\r\n    return(\r\n        <div className = \"dashboard-page-view-gateway-container\">\r\n            <img alt = \"\" src = {GatewayIcon} className = \"dashboard-page-view-gateway-icon\"></img>\r\n            <div className = \"dashboard-page-view-gateway-header\">\r\n                <h1 className = \"dashboard-page-view-gateway-header-text\">GATEWAY INFORMATION</h1>\r\n                <img alt = \"\" src = {GatewayHeader} className = \"dashboard-page-view-gateway-headerimg\"></img>\r\n            </div>\r\n            <div className = \"dashboard-page-view-border-default\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GatewayInfo;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\LightStatus.js",["146"],"import React, {useState, useEffect} from \"react\";\r\n\r\nimport StatusHeader from \"../resources/dashboard/status header.svg\";\r\nimport StatusIcon from \"../resources/dashboard/history-24px.svg\";\r\n\r\nfunction LightStatus(props)\r\n{\r\n    useEffect(() =>\r\n    {\r\n        // simulate getting data\r\n    }, []);\r\n\r\n    return(\r\n        <div className = \"dashboard-page-view-status-container\">\r\n            <img alt = \"\" src = {StatusIcon} className = \"dashboard-page-view-status-icon\"></img>\r\n            <div className = \"dashboard-page-view-status-header\">\r\n                <h1 className = \"dashboard-page-view-status-header-text\">LIGHT STATUS</h1>\r\n                <img alt = \"\" src = {StatusHeader} className = \"dashboard-page-view-status-headerimg\"></img>\r\n            </div>\r\n            <div className = \"dashboard-page-view-border-default\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LightStatus;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumptionOption.js",["147","148"],"import React, {useState, useEffect} from \"react\";\r\n\r\nfunction EnergyConsumptionOption(props)\r\n{\r\n    return(\r\n        <span>\r\n            {props.text === props.curr ?\r\n            <div\r\n                className = \"dashboard-page-view-energy-options-btn-selected\"\r\n                onClick = {props.click}\r\n            >\r\n                {props.text}\r\n            </div> :\r\n            <div\r\n                className = \"dashboard-page-view-energy-options-btn\"\r\n                onClick = {props.click}\r\n            >\r\n                {props.text}\r\n            </div>}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default EnergyConsumptionOption;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\EnergyConsumptionGraph.js",["149","150"],"import React from \"react\";\r\nimport {Line, LineChart, Area, AreaChart, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts';\r\nimport moment from \"moment\";\r\n\r\nfunction EnergyConsumptionGraph(props)\r\n{\r\n    const oneDTemplate =\r\n    (\r\n        <ResponsiveContainer>\r\n            <AreaChart>\r\n                <defs>\r\n                    <linearGradient id=\"presentColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#2CD9C5\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#2CD9C5\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pastColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#8C54FF\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#8C54FF\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n                <CartesianGrid stroke = \"#ccc\" strokeDasharray = \"5 5\"/>\r\n                <XAxis \r\n                    dataKey = \"t\"\r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    axisLine = {false}\r\n                    tickLine = {false}\r\n                    type = \"number\"\r\n                    domain = {[59400, 145800]}\r\n                    tickFormatter = {(tick) => moment(tick * 1000).format('HH:mm')}\r\n                    ticks = {[59400, 73800, 88200, 102600, 117000, 131400, 145800]}\r\n                />\r\n                <YAxis \r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    stroke = \"#E0E0E0\"\r\n                    tick = {{fill: \"#6D6E71\"}}\r\n                />\r\n                <Tooltip \r\n                    wrapperStyle = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    labelFormatter={index => \"\"}\r\n                />\r\n                <Area \r\n                    data = {props.data[0]} \r\n                    type = \"line\" dataKey = \"Present\" \r\n                    stroke = \"#2CD9C5\" fillOpacity = {1} \r\n                    fill = \"url(#presentColour)\" \r\n                    dot = {{stroke: \"#2CD9C5\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n                <Area \r\n                    data = {props.data[1]} \r\n                    type = \"line\" dataKey = \"Past\" \r\n                    stroke = \"#8C54FF\" fillOpacity = {1} \r\n                    fill = \"url(#pastColour)\" \r\n                    dot = {{stroke: \"#8C54FF\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    const fiveDTemplate =\r\n    (\r\n        <ResponsiveContainer>\r\n            <AreaChart>\r\n                <defs>\r\n                    <linearGradient id=\"presentColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#2CD9C5\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#2CD9C5\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pastColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#8C54FF\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#8C54FF\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n                <CartesianGrid stroke = \"#ccc\" strokeDasharray = \"5 5\"/>\r\n                <XAxis \r\n                    dataKey = \"t\"\r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    axisLine = {false}\r\n                    tickLine = {false}\r\n                    type = \"number\"\r\n                    domain = {[1, 5]}\r\n                    ticks = {[1, 2, 3, 4, 5]}\r\n                />\r\n                <YAxis \r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    stroke = \"#E0E0E0\"\r\n                    tick = {{fill: \"#6D6E71\"}}\r\n                />\r\n                <Tooltip \r\n                    wrapperStyle = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    labelFormatter={index => \"\"}\r\n                />\r\n                <Area \r\n                    data = {props.data[2]} \r\n                    type = \"line\" dataKey = \"Present\" \r\n                    stroke = \"#2CD9C5\" fillOpacity = {1} \r\n                    fill = \"url(#presentColour)\" \r\n                    dot = {{stroke: \"#2CD9C5\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n                <Area \r\n                    data = {props.data[3]} \r\n                    type = \"line\" dataKey = \"Past\" \r\n                    stroke = \"#8C54FF\" fillOpacity = {1} \r\n                    fill = \"url(#pastColour)\" \r\n                    dot = {{stroke: \"#8C54FF\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    const oneMTemplate =\r\n    (\r\n        <ResponsiveContainer>\r\n            <AreaChart>\r\n                <defs>\r\n                    <linearGradient id=\"presentColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#2CD9C5\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#2CD9C5\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pastColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#8C54FF\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#8C54FF\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n                <CartesianGrid stroke = \"#ccc\" strokeDasharray = \"5 5\"/>\r\n                <XAxis \r\n                    dataKey = \"t\"\r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    axisLine = {false}\r\n                    tickLine = {false}\r\n                    type = \"number\"\r\n                    domain = {[1, 4]}\r\n                    ticks = {[1, 2, 3, 4]}\r\n                />\r\n                <YAxis \r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    stroke = \"#E0E0E0\"\r\n                    tick = {{fill: \"#6D6E71\"}}\r\n                />\r\n                <Tooltip \r\n                    wrapperStyle = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    labelFormatter={index => \"\"}\r\n                />\r\n                <Area \r\n                    data = {props.data[4]} \r\n                    type = \"line\" dataKey = \"Present\" \r\n                    stroke = \"#2CD9C5\" fillOpacity = {1} \r\n                    fill = \"url(#presentColour)\" \r\n                    dot = {{stroke: \"#2CD9C5\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n                <Area \r\n                    data = {props.data[5]} \r\n                    type = \"line\" dataKey = \"Past\" \r\n                    stroke = \"#8C54FF\" fillOpacity = {1} \r\n                    fill = \"url(#pastColour)\" \r\n                    dot = {{stroke: \"#8C54FF\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    const oneYTemplate =\r\n    (\r\n        <ResponsiveContainer>\r\n            <AreaChart>\r\n                <defs>\r\n                    <linearGradient id=\"presentColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#2CD9C5\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#2CD9C5\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pastColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#8C54FF\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#8C54FF\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n                <CartesianGrid stroke = \"#ccc\" strokeDasharray = \"5 5\"/>\r\n                <XAxis \r\n                    dataKey = \"t\"\r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    axisLine = {false}\r\n                    tickLine = {false}\r\n                    type = \"number\"\r\n                    domain = {[1, 12]}\r\n                    ticks = {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}\r\n                />\r\n                <YAxis \r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    stroke = \"#E0E0E0\"\r\n                    tick = {{fill: \"#6D6E71\"}}\r\n                />\r\n                <Tooltip \r\n                    wrapperStyle = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    labelFormatter={index => \"\"}\r\n                />\r\n                <Area \r\n                    data = {props.data[6]} \r\n                    type = \"line\" dataKey = \"Present\" \r\n                    stroke = \"#2CD9C5\" fillOpacity = {1} \r\n                    fill = \"url(#presentColour)\" \r\n                    dot = {{stroke: \"#2CD9C5\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n                <Area \r\n                    data = {props.data[7]} \r\n                    type = \"line\" dataKey = \"Past\" \r\n                    stroke = \"#8C54FF\" fillOpacity = {1} \r\n                    fill = \"url(#pastColour)\" \r\n                    dot = {{stroke: \"#8C54FF\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    const threeYTemplate =\r\n    (\r\n        <ResponsiveContainer>\r\n            <AreaChart>\r\n                <defs>\r\n                    <linearGradient id=\"presentColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#2CD9C5\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#2CD9C5\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                    <linearGradient id=\"pastColour\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                        <stop offset=\"25%\" stopColor=\"#8C54FF\" stopOpacity={0.15}/>\r\n                        <stop offset=\"100%\" stopColor=\"#8C54FF\" stopOpacity={0}/>\r\n                    </linearGradient>\r\n                </defs>\r\n                <CartesianGrid stroke = \"#ccc\" strokeDasharray = \"5 5\"/>\r\n                <XAxis \r\n                    dataKey = \"t\"\r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    axisLine = {false}\r\n                    tickLine = {false}\r\n                    type = \"number\"\r\n                    domain = {[1, 3]}\r\n                    ticks = {[1, 2, 3]}\r\n                />\r\n                <YAxis \r\n                    style = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    stroke = \"#E0E0E0\"\r\n                    tick = {{fill: \"#6D6E71\"}}\r\n                />\r\n                <Tooltip \r\n                    wrapperStyle = {{\r\n                        color: \"#6D6E71\",\r\n                        fontFamily: \"work sans, sans-serif\",\r\n                        fontSize: \"max(0.7vw, 10.08px)\",\r\n                        fontWeight: \"500\",\r\n                        letterSpacing: \"0.05em\"\r\n                    }}\r\n                    labelFormatter={index => \"\"}\r\n                />\r\n                <Area \r\n                    data = {props.data[8]} \r\n                    type = \"line\" dataKey = \"Present\" \r\n                    stroke = \"#2CD9C5\" fillOpacity = {1} \r\n                    fill = \"url(#presentColour)\" \r\n                    dot = {{stroke: \"#2CD9C5\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n                <Area \r\n                    data = {props.data[9]} \r\n                    type = \"line\" dataKey = \"Past\" \r\n                    stroke = \"#8C54FF\" fillOpacity = {1} \r\n                    fill = \"url(#pastColour)\" \r\n                    dot = {{stroke: \"#8C54FF\", strokeWidth: 2, fill: \"#FFFFFF\"}} \r\n                />\r\n            </AreaChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    return(\r\n        <div className = \"dashboard-page-view-energy-graph-container\">\r\n            {props.data && props.option === \"1D\" && oneDTemplate}\r\n            {props.data && props.option === \"5D\" && fiveDTemplate}\r\n            {props.data && props.option === \"1M\" && oneMTemplate}\r\n            {props.data && props.option === \"1Y\" && oneYTemplate}\r\n            {props.data && props.option === \"3Y\" && threeYTemplate}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EnergyConsumptionGraph;","C:\\Users\\Murphy Tan\\Desktop\\lms\\react\\lms\\src\\components\\GenericDropdown.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"151","replacedBy":"155"},{"ruleId":"153","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":16,"column":12,"nodeType":"159","messageId":"160","endLine":16,"endColumn":25},{"ruleId":"157","severity":1,"message":"161","line":17,"column":12,"nodeType":"159","messageId":"160","endLine":17,"endColumn":26},{"ruleId":"157","severity":1,"message":"162","line":26,"column":14,"nodeType":"159","messageId":"160","endLine":26,"endColumn":33},{"ruleId":"157","severity":1,"message":"163","line":31,"column":14,"nodeType":"159","messageId":"160","endLine":31,"endColumn":34},{"ruleId":"157","severity":1,"message":"164","line":36,"column":14,"nodeType":"159","messageId":"160","endLine":36,"endColumn":37},{"ruleId":"157","severity":1,"message":"165","line":41,"column":14,"nodeType":"159","messageId":"160","endLine":41,"endColumn":35},{"ruleId":"157","severity":1,"message":"166","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"157","severity":1,"message":"166","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"157","severity":1,"message":"166","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"157","severity":1,"message":"166","line":1,"column":16,"nodeType":"159","messageId":"160","endLine":1,"endColumn":24},{"ruleId":"157","severity":1,"message":"167","line":1,"column":26,"nodeType":"159","messageId":"160","endLine":1,"endColumn":35},{"ruleId":"157","severity":1,"message":"168","line":2,"column":9,"nodeType":"159","messageId":"160","endLine":2,"endColumn":13},{"ruleId":"157","severity":1,"message":"169","line":2,"column":15,"nodeType":"159","messageId":"160","endLine":2,"endColumn":24},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],["170"],["171"],"no-unused-vars","'selectedFloor' is assigned a value but never used.","Identifier","unusedVar","'selectedLights' is assigned a value but never used.","'handleOnButtonClick' is defined but never used.","'handleOffButtonClick' is defined but never used.","'handleNormalButtonClick' is defined but never used.","'handleLoopButtonClick' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Line' is defined but never used.","'LineChart' is defined but never used.","no-global-assign","no-unsafe-negation"]